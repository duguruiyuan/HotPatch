import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
}

/**
 * add "dexHack${variant.name.capitalize()}" task to create hack.apk
 */
project.afterEvaluate {
    project.android.applicationVariants.each { variant ->
        def variantName = "${variant.name}"
        def variantNameCap = "${variantName.capitalize()}"
        def dexHack = project.task("dexHack${variantNameCap}") << {
            File hackClass = new File("${project.buildDir}/intermediates/classes/${variantName}/com/lee/hack/AntilazyLoad.class")
            if (hackClass.exists()) {
                FileInputStream inputStream = new FileInputStream(hackClass)
                File hackDir = new File("${project.buildDir}/intermediates/hack/${variantName}/com/lee/hack")
                if (!hackDir.exists()) {
                    hackDir.mkdirs()
                }
                FileOutputStream outputStream = new FileOutputStream(new File(hackDir, "AntilazyLoad.class"))
                byte[] buf = new byte[1024]
                int len = -1
                while ((len = inputStream.read(buf)) != -1) {
                    outputStream.write(buf, 0, len)
                }
                inputStream.close()
                outputStream.close()
                hackDir = new File("${project.buildDir}/intermediates/hack/${variantName}")
                if (hackDir.exists() && hackDir.listFiles().size()) {
                    def sdkDir
                    Properties properties = new Properties()
                    File localProps = project.rootProject.file("local.properties")
                    if (localProps.exists()) {
                        properties.load(localProps.newDataInputStream())
                        sdkDir = properties.getProperty("sdk.dir")
                    } else {
                        sdkDir = System.getenv("ANDROID_HOME")
                    }
                    if (sdkDir) {
                        String cmd = "${sdkDir}/build-tools/${project.android.buildToolsVersion}/dx${Os.isFamily(Os.FAMILY_WINDOWS) ? '.bat' : ''}"
                        File outDir = new File("${project.buildDir}/outputs/hack/${variantName}")
                        if (!outDir.exists()) {
                            outDir.mkdirs()
                        }
                        OutputStream stdout = new ByteArrayOutputStream()
                        project.exec {
                            commandLine "${cmd}",
                                    '--dex',
                                    "--output=${outDir.absolutePath}/hack.apk",
                                    "${hackDir.absolutePath}"
                            standardOutput = stdout
                        }
                        def error = stdout.toString().trim()
                        if (error) {
                            println "dex error:" + error
                        }
                    } else {
                        throw new IllegalArgumentException('$ANDROID_HOME is not defined')
                    }
                }
            }
        }
        dexHack.dependsOn project.tasks.findByName("compile${variantNameCap}JavaWithJavac")
    }
}
